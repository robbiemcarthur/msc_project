package StudentGraph;

import java.util.Iterator;
import java.util.NoSuchElementException;

public class ESDigraph implements Digraph {

    // Each ESDigraph object is a directed graph whose elements and
    // edge attributes are arbitrary objects.

    // This directed graph is represented by a node set and edge set as follows.
    // firstNode is a link to the first node in a DLL of ESDigraphNode
    // objects, each of which contains an element. firstEdge is a link to the
    // first node in a DLL of ESDigraphEdge objects, each of which
    // contains an attribute and is linked to the edge's source and destination
    // nodes. size contains the graph's size.

    private ESDigraph.Node firstNode;
    private ESDigraph.Edge firstEdge;
    private int size;

    //////////// Constructor ////////////

    public ESDigraph () {
    // Construct a directed graph, initially empty.
        firstNode = null;
        firstEdge = null;
        size = 0;
    }

    //////////// Accessors ////////////

    public int size () {
    // Return the number of nodes in this graph.
        return this.size;
    }

    public int degree (Graph.Node node) {
    // Return the number of edges connecting node in this graph.
        int numEdges = 0;
        for (ESDigraph.Edge e = firstEdge; e != null; e = e.nextEdge) {
            if (e.source == node || e.dest == node)
                numEdges++;
        }
        return numEdges;
    }

    public boolean containsEdge (Graph.Node node0, Graph.Node node1) {
    // Return true if and only if there is an edge connecting node0 and
    // node1 in this graph. (If the graph is directed, node0 is the edge's
    // source and node1 is the destination.)
        for (ESDigraph.Edge e = firstEdge; e != null; e = e.nextEdge) {
            if (e.source == node0 && e.dest == node1)
                return true;
        }
        return false;
    }

    public int outDegree (Graph.Node node) {
    // Return the number of out-edges of node in this directed graph.
        return ((ESDigraph.Node) node).outDegree;
    }
}
