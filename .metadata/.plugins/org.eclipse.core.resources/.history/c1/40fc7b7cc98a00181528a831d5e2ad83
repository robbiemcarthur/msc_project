package StudentGraph;

import java.util.ArrayList;
import java.util.Random;

import NameGenerator.NameGenerator;
import StudentGraph.KnowledgeGraph.Node;

public class KnowledgeGraphFactory implements GraphFactory {
	private KnowledgeGraph g;
	private ArrayList<Lesson> LessonList;
	private KnowledgeGraph.Node n;
	private Random rand;
	private Lesson l;
	private Student s;
	private NameGenerator ng;
	private boolean passed;
	private int grade;

	public KnowledgeGraphFactory() {
		g = new KnowledgeGraph();
		s = new Student();
		ng = new NameGenerator();
		ng.loadNames(10000);
		rand = new Random();
		passed = false;
		grade = rand.nextInt(100);
	}

	@Override
	public Graph createGraph() {
		g = new KnowledgeGraph();
		return g;
	}
	
	public boolean checkPass() {
		if (grade>=60) {
			passed = true;
		}
		else {
			passed = false;
		}
		return passed;
	}
	
	public int resitGrade() {
		if(grade<=40) {
			grade += rand.nextInt(60);
		}
		else {
			grade = rand.nextInt(100);
		}
		return grade;
	}
	
	public void generateRandomGrade() {
		resitGrade();
		grade = rand.nextInt(100);
	}

	public KnowledgeGraph createMathGraph() {
		g = new KnowledgeGraph();
		String teacher = ng.GenerateName();
		String course = "Math";
		ArrayList<String> concepts = new ArrayList();
		concepts.add("Math 1");
		concepts.add("Math 2");
		concepts.add("Revision 1");
		concepts.add("Math 3");
		concepts.add("Revision 2");
		for (String con: concepts) {
			l = new Lesson(teacher, course, con, grade, s);
			Object lesson = l;
			n = new KnowledgeGraph.Node(lesson);
			while(!passed) {
				if(grade >= 60) {
					g.addNode(n);
				}
			}
		}
		return g;
	}

}
