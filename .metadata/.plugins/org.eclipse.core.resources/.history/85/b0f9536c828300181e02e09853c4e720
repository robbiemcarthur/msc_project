package StudentGraph;

import java.util.Iterator;
import java.util.NoSuchElementException;

public class KnowledgeGraph implements Digraph {
	private Node firstNode;
	private Edge firstEdge;
	private int size;

	public KnowledgeGraph(int maxsize) {
		firstNode = null;
		firstEdge = null;
		size = 0;
	}

	@Override
	public int size() {
		return this.size;
	}

	@Override
	public int degree(Node node) {
		// return number of edges connecting nodes in this graph
		int numEdges = 0;
		for(Edge e = firstEdge; e!= null; e = e.nextEdge) {
		}

		@Override
		public boolean containsEdge(Node node0, Node node1) {
			// TODO Auto-generated method stub
			return false;
		}

		@Override
		public void clear() {
			// TODO Auto-generated method stub

		}

		@Override
		public Node addNode(Object elem) {
			// TODO Auto-generated method stub
			return null;
		}

		@Override
		public Edge addEdge(Node node0, Node node1) {
			// TODO Auto-generated method stub
			return null;
		}

		@Override
		public Edge addEdge(Node node0, Node node1, Object attr) {
			// TODO Auto-generated method stub
			return null;
		}

		@Override
		public void removeNode(Node node) {
			// TODO Auto-generated method stub

		}

		@Override
		public void removeEdge(Edge edge) {
			// TODO Auto-generated method stub

		}

		@Override
		public Iterator nodes() {
			// TODO Auto-generated method stub
			return null;
		}

		@Override
		public Iterator edges() {
			// TODO Auto-generated method stub
			return null;
		}

		@Override
		public Iterator neighbors(Node node) {
			// TODO Auto-generated method stub
			return null;
		}

		@Override
		public Iterator connectingEdges(Node node) {
			// TODO Auto-generated method stub
			return null;
		}

		@Override
		public int outDegree(Node node) {
			// TODO Auto-generated method stub
			return 0;
		}

		@Override
		public Iterator successors(Node node) {
			// TODO Auto-generated method stub
			return null;
		}

		@Override
		public Iterator outEdges(Node node) {
			// TODO Auto-generated method stub
			return null;
		}
	

		////////////Inner classes ////////////

		private static class Node implements Graph.Node {

			// Each ESDigraph.Node object is a directed graph node, and contains a
			// single element.

			private Object element;
			private int outDegree;
			private KnowledgeGraph.Node prevNode, nextNode;

			//////////// Constructor ////////////

			private Node (Object element) {
				this.element = element;
				this.outDegree = 0;
				this.prevNode = null;
				this.nextNode = null;
			}

			//////////// Accessor ////////////

			public Object getElement () {
				return this.element;
			}

			//////////// Transformer ////////////

			public void setElement (Object element) {
				this.element = element;
			}
		}

		//////////////////////////////////////////////////////////////////////////

		private static class Edge implements Graph.Edge {

			// Each ESDigraph.Edge object is a directed graph edge, and optionally
			// contains an attribute.

			private Object attribute;
			private KnowledgeGraph.Node source, dest;
			private KnowledgeGraph.Edge prevEdge, nextEdge;

			//////////// Constructor ////////////

			private Edge (KnowledgeGraph.Node source, KnowledgeGraph.Node dest, Object attr) {
				this.source = source;
				this.dest = dest;
				this.attribute = attr;
				this.prevEdge = null;
				this.nextEdge = null;
			}

			public Graph.Node[] getNodes () {
				// Return an array containing the two nodes connected by this edge.
				// (If the graph is directed, the array will contain the edge's source
				// and destination, in that order.)
				return new Graph.Node[] {this.source, this.dest};
			}

			public Object getAttribute () {
				// Return the attribute contained in this edge, or null if there is
				// none.
				return this.attribute;
			}

			public void setAttribute (Object attr) {
				// Change the attribute contained in this edge to attr.
				this.attribute = attr;
			}
		}

		//////////////////////////////////////////////////////////////////////////

		private class AllNodeIterator implements Iterator {

			private KnowledgeGraph.Node currNode;

			private AllNodeIterator () {
				currNode = firstNode;
			}

			public boolean hasNext () {
				return (currNode != null);
			}

			public Object next () {
				Object result = currNode;
				if (result == null)  throw new NoSuchElementException();
				currNode = currNode.nextNode;
				return result;
			}

			public void remove () {
				if (currNode == null)  throw new IllegalStateException();
				removeNode(currNode);
			}
		}

		//////////////////////////////////////////////////////////////////////////

		private class NodeIterator implements Iterator {

			private Iterator allEdges;
			private ESDigraph.Node currNode, targetNode;
			private boolean directed;

			private NodeIterator (ESDigraph.Node node, boolean directed) {
				this.targetNode = node;
				this.directed = directed;
				this.allEdges = new ESDigraph.AllEdgeIterator();
				this.currNode = scanNextNode();
			}

			private ESDigraph.Node scanNextNode () {
				while (allEdges.hasNext()) {
					ESDigraph.Edge currEdge = (ESDigraph.Edge) allEdges.next();
					if (currEdge.source == targetNode) {
						return currEdge.dest;
					} else if (! directed && currEdge.dest == targetNode) {
						return currEdge.source;
					}
				}
				return null;
			}

			public boolean hasNext () {
				return (currNode != null);
			}

			public Object next () {
				Object result = currNode;
				if (result == null)  throw new NoSuchElementException();
				currNode = scanNextNode();
				return result;
			}

			public void remove () {
				if (currNode == null)  throw new IllegalStateException();
				removeNode(currNode);
			}
		}

		//////////////////////////////////////////////////////////////////////////

		private class AllEdgeIterator implements Iterator {

			private ESDigraph.Edge currEdge;

			private AllEdgeIterator () {
				currEdge = firstEdge;
			}

			public boolean hasNext () {
				return (currEdge != null);
			}

			public Object next () {
				Object result = currEdge;
				if (result == null)  throw new NoSuchElementException();
				currEdge = currEdge.nextEdge;
				return result;
			}

			public void remove () {
				if (currEdge == null)  throw new IllegalStateException();
				removeEdge(currEdge);
			}
		}

		//////////////////////////////////////////////////////////////////////////

		private class EdgeIterator implements Iterator {

			private Iterator allEdges;
			private ESDigraph.Edge currEdge;
			private ESDigraph.Node targetNode;
			private boolean directed;

			private EdgeIterator (ESDigraph.Node node, boolean directed) {
				this.allEdges = new ESDigraph.AllEdgeIterator();
				this.targetNode = node;
				this.directed = directed;
				this.currEdge = scanNextEdge();
			}

			private ESDigraph.Edge scanNextEdge () {
				while (allEdges.hasNext()) {
					ESDigraph.Edge edge = (ESDigraph.Edge) allEdges.next();
					if ((edge.source == targetNode) ||
							(! directed && edge.dest == targetNode))
						return edge;
				}
				return null;
			}

			public boolean hasNext () {
				return (currEdge != null);
			}

			public Object next () {
				Object result = currEdge;
				if (result == null)  throw new NoSuchElementException();
				currEdge = scanNextEdge();
				return result;
			}

			public void remove () {
				if (currEdge == null)  throw new IllegalStateException();
				removeEdge(currEdge);
			}
		}
	}

}
