package main.Application;

import java.util.ArrayList;
import java.util.Random;

import main.StudentGraph.KnowledgeGraph;
import main.StudentGraph.Lesson;
import main.StudentGraph.Student;

public class RouteController {
	private boolean passed;
	private int visits;
	private final int MAX_VISITS = 2;
	private Student s;
	private Lesson curr, prev, next;
	private ArrayList<KnowledgeGraph.Node> nodes;
	private ArrayList<Lesson> lessons;
	private KnowledgeGraph graph;
	private Random rand;


	public RouteController() {
		visits = 0;
		s = new Student();
		curr = new Lesson();
		prev = new Lesson();
		next= new Lesson();
		nodes = new ArrayList();
		lessons = new ArrayList();
		graph = new KnowledgeGraph(0, s);
		passed = false;
		rand = new Random();
	}

	public KnowledgeGraph route(ArrayList<Lesson> lessons, KnowledgeGraph graph) {
		this.lessons = lessons;
		this.graph = graph;
		for(int i = 0; i < lessons.size(); i++) {
			curr = lessons.get(i);
			curr.setgrade(rand.nextInt(60)+40);
			int visits = rand.nextInt(5);
			if(visits==4 || visits==5) {
				visits = 0;
			}
			if(visits==0) {
				//add standard lesson to next standard lesson
			}
			else {
				// add standard lesson to next standard lesson, and revision lesson
			}
		}
		return this.graph;
	}

	public KnowledgeGraph getRoute(ArrayList<KnowledgeGraph.Node> nodes, KnowledgeGraph graph) {
		this.nodes = nodes;
		this.graph = graph;
		for(int i = 0; i < nodes.size(); i++) {
			passed = false;
			visits = 1;
			while(!passed && visits<MAX_VISITS)
			{
				if(i % 2 == 0) {
					lesson(i);
					if(passed==false && !(i==0))
					{
						i--;
					}
				}
				else {
					revisionLesson(i);
					if(passed==false && !(i==0)) {
						i--;
					}
				}
			}
		}
		return graph;
	}

	public void lesson(int i) {
		if(!(i==0))
		{
			prevLesson = (Lesson) nodes.get(i-1).getElement();
		}
		currLesson = (Lesson) nodes.get(i).getElement();
		if(!(currLesson.getID()==prevLesson.getID()))
		{
			graph.addNode(currLesson);
		}
		if(currLesson.getGrade()==0)
		{
			currLesson.setRandomGrade();
		}
		else {
			currLesson.setgrade(currLesson.resitGrade(currLesson.getGrade()));
		}
		if(currLesson.getGrade()>40) {
			if(!(i==8))
			{
				graph.addEdge(nodes.get(i), nodes.get(i + 2), visits);
			}
			i += 1;
			passed = true;
		}
		else {
			visits++;
		}
	}

	public void revisionLesson(int i) {
		prevLesson = (Lesson) nodes.get(i-1).getElement();
		if(prevLesson.getGrade()>40)
		{
			passed = true;
		}
		else {
			if(!(i==9))
			{
				currLesson = (Lesson) nodes.get(i).getElement();
				nextLesson = (Lesson) nodes.get(i+1).getElement();
				if(!(currLesson.getID()==prevLesson.getID() || !(nextLesson.getID()==currLesson.getID())))
				{
					graph.addNode(currLesson);
				}
				currLesson.setgrade(40);
				KnowledgeGraph.Edge edge = new KnowledgeGraph.Edge(nodes.get(i), nodes.get(i + 1), visits);
				if(!graph.containsEdge(nodes.get(i), nodes.get(i + 1)))
				{
					graph.addEdge(nodes.get(i), nodes.get(i + 1), visits);
					passed = true;
				}
				else 
				{
					if(visits<MAX_VISITS)
					{
						visits++;
						graph.removeEdge(edge);
						graph.addEdge(nodes.get(i), nodes.get(i + 1), visits);
					}
					else {
						passed = true;
					}
				}
			}
		}
		//		else {
		//			lesson = (Lesson) nodes.get(i-1).getElement();
		//			if(lesson.getGrade()>40)
		//			{
		//				passed = true;
		//			}
		//			else
		//			{
		//				lesson = (Lesson) nodes.get(i).getElement();
		//				graph.addNode(lesson);
		//				lesson.setgrade(40);
		//				passed = true;
		//			}
		//		}
	}
}
