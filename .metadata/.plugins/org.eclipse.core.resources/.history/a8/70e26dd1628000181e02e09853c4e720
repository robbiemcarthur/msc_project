package KnowledgeGraph;

import java.util.Iterator;

public interface Graph {
	// directed/undirected graph objects with element and edge attributes

	public interface Node {
		// each Graph.Node object is a node in the graph, containing a single element
		
	
		public Object getElement();
		// return element in node
		
		public void setElement(Object elem);
		// change the element contained in this node to elem
	} 
	
	public interface Edge {
		// each Graph.Edge object is a graph edge and optionally contains an attribute
		
		public Graph.Node[] getNodes();
		// return array containing two nodes connected by this edge
		
		public Object getAttribute();
		// return the attribute contained in this edge, or null if there isnt one
		
		public void setAttribute(Object attr);
		// change the attribute contained in this edge to attr
		
	}
	////////// Accessors ///////////

	public int size ();
	// return number of nodes in graph
	
	public int degree (Graph.Node node);
	// return number of edges connecting node in this graph 
	
	public boolean containsEdge (Graph.Node node0, Graph.Node node1);
	// Return true if edge connecting node0 and node1 in this graph
	
	////////// Transformers ///////////
	
	public void clear();
	// make graph empty
	
	public Graph.Node addNode(Object elem);
	// add a new node to the graph containing elem, but with no
	// connecting edges and return new node
	
	public Graph.Edge addEdge (Graph.Node node0, Graph.Node node1);
	// add new edge connecting node0 and node1, but containing no attribute
	// return new edge
	
	public void removeNode (Graph.Node node);
	// remove node from graph, including connecting edges
	
	public void removeEdge (Graph.Edge edge);
	// remove edge from graph
	
	///////// Iterators /////////
	public Iterator nodes ();
	// return an iterator that will visit all nodes in the graph, in no particular order
	
	public Iterator edges();
	// return an iterator that will visit all connecting edges in graph, no order
	
	public Iterator neighbours (Graph.Node node);
	//iterator to visit all neighbours of node in this graph
	
	public Iterator connectingEdges (Graph.Node node);
	// return iterator visiting all connecting edges of node in this graph
	
	
}
