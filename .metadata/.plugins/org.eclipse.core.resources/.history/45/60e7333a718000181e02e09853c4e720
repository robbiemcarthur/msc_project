package KnowledgeGraph;

public class SLL {
	/**
	 * each SLL object is the header of a singly linked list
	 */

	private Node first;

	public SLL() {
		this.first = null;
	}

	///////// Inner class /////////

	private static class Node {
		private Object element;
		protected Node next;

		public Node(Object elem, Node next) {
			this.element = elem;
			this.next = next;
		}
	}

	public void printFirstToLast() {
		// print all elements in this SLL, in first-to-last order
		Node curr = this.first;
		while(curr!=null) {
			System.out.print(curr.element);
			curr = curr.next;
		}
	}

	public void deleteFirst() {
		// delete this SLL's first node (assuming length > 0)
		this.first = this.first.next;
	}

	public void insert(Object elem, Node pred ) {
		/**
		 * insert elem at a given point in this SLL, either after the 
		 * node pred, or before the first node if pred is null 
		 */
		Node ins = new Node(elem,null);
		if(pred==null) {
			ins.next = this.first;
			this.first = ins;
		}
		else {
			ins.next = pred.next;
			pred.next = ins;
		}
	}

	public void delete(SLL.Node del) {
		// delete Node del from this sll 
		Node next = del.next;
		if(del == this.first) {
			this.first = next;
		}
		else {
			Node pred = this.first;
			while(pred.next != del) {
				pred = pred.next;
			}
			pred.next = next;
		}
	}
	
	public Node search(Object target) {
		/**
		 * find which, if any, node of this SLL contains an
		 * element equal to target. Return a link to the 
		 * matching node, or null if there is none
		 */
		Node curr = this.first;
		while(curr != null) {
			if(target.equals(curr.element))
			{
				System.out.println("found");
				return curr;
			}
			curr = curr.next;
		}
		return null;
	}
}

