package main.Application.controllers;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.Random;
import main.Application.models.KnowledgeGraph;
import main.Application.models.Lesson;
import main.Application.models.Student;
import main.Application.views.StudyBuddyView;
import main.Factories.StudentFactory;
import main.Application.models.KnowledgeGraph.Node;
/**
 * 
 * @author Robbie McArthur - 2098323m
 *
 * This class provides the control mechanisms for the Study Buddy
 * section of the program. 
 * 
 * It will enable users to add their own concept graph, and use it
 * to find relevant study buddies, using numerous distance measuring
 * algorithms such as simple feature extraction and graph clustering.
 *
 */

public class StudyBuddyController {
	private StudyBuddyView v;
	private ArrayList<KnowledgeGraph> studentGraphs;
	private ArrayList<Student> students;
	private ArrayList<int[][]> vectors;
	private int choice;
	private int[][] query;
	private KnowledgeGraph graph;
	private StudentFactory sf;
	private Random rand;

	private final int MAX_ITERATIONS = 20;

	public StudyBuddyController(KnowledgeGraph graph, ArrayList<KnowledgeGraph> graphs) {
		v = new StudyBuddyView(this);
		this.graph = graph;
		this.studentGraphs = graphs;
		students = new ArrayList<Student>();
		new ArrayList<KnowledgeGraph>();
		vectors = new ArrayList<int[][]>();
		choice = 0;
		sf = new StudentFactory();
		rand = new Random();
	}


	public void start(GraphGeneratorController c) {
		v.SBMenu();
		try {
			choice = Integer.parseInt(v.getUserInput());
				switch(choice) {
				case 1:
					System.out.println("\nPlease enter your graph number....");	
					choice = Integer.parseInt(v.getUserInput());
					System.out.println("\nShowing your Knowledge Graph....");
					showBuddyDetails(studentGraphs.get(choice));
					break;
				case 2:
					System.out.println("\nShowing your current studdy buddy matches....");	
					System.out.println("\nSHow many would you like to view?");	
					choice = Integer.parseInt(v.getUserInput());
					showStudyBuddies(choice);
					break;
				case 3:
					v.similarLearningAbility();
					System.out.println("\nHow many neighbours do you wish to return?");
					choice = Integer.parseInt(v.getUserInput());
					cluster(choice,studentGraphs);
					break;
				case 4:
					v.coverKnowledgeGap();
					SFE(graph, studentGraphs);
					break;
				case 5:
					System.out.println("\nComparing graphs to check buddy compatibility....");	
					System.out.println("\nPlease enter your graph ID: ");
					choice = Integer.parseInt(v.getUserInput());
					KnowledgeGraph q = studentGraphs.get(choice);
					System.out.println("\nPlease enter your buddies graph ID:  ");
					choice = Integer.parseInt(v.getUserInput());
					KnowledgeGraph t = studentGraphs.get(choice);
					computeGraphDistance(q,t);
					break;
				case 6:
					System.out.println("\nReturning to main menu....");	
					c.returnToMainMenu();
				default:
					System.out.println("\nPlease enter a valid choice.");	
				}
		} catch (NumberFormatException e) {
			System.out.println("\nInvalid input");
		}catch (IndexOutOfBoundsException e) {
			System.out.println("\nNo such graph exists. Please try again.");
		}
	} 

	/**
	 * Method prints the details of the Knowledge Graph of recommended
	 * study buddy for user. 
	 *  
	 * @param graph - graph of recommended study buddy
	 */
	public void showBuddyDetails(KnowledgeGraph graph) {
		System.out.println("\n\nFound study buddy with the following knowledge graph: ");
		@SuppressWarnings("rawtypes")
		Iterator iter = graph.nodes();
		while(iter.hasNext()) {
			KnowledgeGraph.Node n = (Node) iter.next();
			Lesson les = (Lesson) n.getElement();
			System.out.println("ID: " + les.getID() + " Course: " + les.getCourse() 
			+ " Concept: " + les.getConcept() + " Teacher: " 
			+ les.getTeacher() + " Grade: " + les.getGrade() + " Student: " + les.getStudent());
		}
	}

//	public void showBuddyDetails(Student s) {
//		System.out.println("\n\nFound study buddy with the following knowledge graph: ");
//		@SuppressWarnings("rawtypes")
//		Iterator iter = graph.nodes();
//		while(iter.hasNext()) {
//			KnowledgeGraph.Node n = (Node) iter.next();
//			Lesson les = (Lesson) n.getElement();
//			System.out.println("ID: " + les.getID() + " Course: " + les.getCourse() 
//			+ " Concept: " + les.getConcept() + " Teacher: " 
//			+ les.getTeacher() + " Grade: " + les.getGrade() + " Student: " + les.getStudent());
//		}
//	}

	public void showStudyBuddies(int k) {
		System.out.println("\nRecommended students are: ");
		for(int i = 0; i < k; i++) {
			System.out.println("\nStudent: " + students.get(i).getName() + " ID: " + students.get(i).getID() + " distance: " + students.get(i).getDistance());
		}
	}


	/**
	 * Method uses simple feature extraction, computing the distance between
	 * in/out degrees of the nodes in each graph within the graph set.
	 * 
	 * A recommendation of the k - nearest neighbouring graphs is returned.
	 * 
	 * @param graph - KnowledgeGraph used to find buddy
	 * @return graph - n x 2 matrix representation of graph
	 */
	public void SFE(KnowledgeGraph graph, ArrayList<KnowledgeGraph> graphs) {
			try {
				for(KnowledgeGraph g: graphs ) {
					int[][] query = new int[2][graph.size()];
					query = generateVector(query, g);
					vectors.add(query);
				}
				//		vectorTest();
				computeDistance();
				System.out.println("\nHow many neighbours do you wish to return?");
				choice = Integer.parseInt(v.getUserInput());
				returnKNN(choice);
			} 
			catch(NumberFormatException e) {
				System.out.println("\nSomething went wrong. Please try again.");
			} 
			catch (IndexOutOfBoundsException e) {
				System.out.println("\nIndex out of bounds. Try again.");
			}
	}

	public void computeDistance() {
		try {
			System.out.println("\nWhich graph number is yours?");
			choice = Integer.parseInt(v.getUserInput());
			query = vectors.get(choice);
			vectors.remove(query);
			double distance = 0.0;
			int graphNum = 0;
			for(int[][] arr: vectors) {
				double overall = 0.0;
				for(int j = 0; j < graph.size(); j++) {
					distance = 0.0;
					for(int i = 0; i < 2; i ++) {
						distance += Math.pow(query[i][j]-arr[i][j], 2.0);
						//					System.out.println(String.format("Distance between query and matrix is: %.2f", distance));
					}
					distance = Math.sqrt(distance);
					overall += distance;
				}
				System.out.println("\nOverall distance is: " + overall);
				Student s = sf.getStudent();
				s.setDistance(overall);
				s.setGraph(studentGraphs.get(graphNum));
				graphNum++;
				students.add(s);
			}
		}catch (IndexOutOfBoundsException e) {
			System.out.println("\nIndex out of bounds. Please try again.");
		}
		catch (NumberFormatException e) {
			System.out.println("\nPlease enter a valid number.");
		}
	}
	
	public void returnKNN(int k) {
		try {
			Collections.sort(students);
			System.out.println("\nRecommended students are: ");
			for(int i = 0; i < k; i++) {
				System.out.println("\nStudent: " + students.get(i).getName() + " distance: " + students.get(i).getDistance());
				showBuddyDetails(students.get(i).getGraph());
			}
		}
		catch (IndexOutOfBoundsException e) {
			System.out.println("\nIndex out of bounds. Please try again.");
		}
		catch (NumberFormatException e) {
			System.out.println("\nPlease enter a valid number.");
		}
	}

	/**
	 * Function takes two KnowledgeGraph objects and computes Euclidian distance
	 * between them. 
	 * 
	 * @param query - query graph
	 * @param target - target graph
	 * @return distance - double, measure of distance between query and target
	 */
	public double computeGraphDistance(KnowledgeGraph query, KnowledgeGraph target) {
		double distance = 0.0;
		double overall = 0.0;
		try {
			int[][] q = new int[2][query.size()];
			int[][] t = new int[2][target.size()];
			q = generateVector(q, query);
			t = generateVector(t, target);
			for(int j = 0; j < graph.size(); j++) {
				distance = 0.0;
				for(int i = 0; i < 2; i ++) {
					distance += Math.pow(q[i][j]-t[i][j], 2.0);
					//				System.out.println(String.format("Distance between query and matrix is: %.2f", distance));
				}
				distance = Math.sqrt(distance);
				overall += distance;
			}
		}
		catch (IndexOutOfBoundsException e) {
			System.out.println("\nIndex out of bounds. Please try again.");
		}
		catch (NumberFormatException e) {
			System.out.println("\nPlease enter a valid number.");
		}
		//		System.out.println("Distance between graph 1 and graph 2 is: " + overall);
		return overall;
	}


	public int median(ArrayList<KnowledgeGraph> list) {
		Double minDistance = Double.MAX_VALUE;
		int minIndex = 0;
		try {
			for(int i = 0; i<list.size(); i++) {
				double d = 0.0;
				for(int j = 0; j<list.size(); j++) {
					d += computeGraphDistance(list.get(i), list.get(j));
				}
				if(d<minDistance) {
					minDistance = d;
					minIndex = i;
				}
			}
		}
		catch (IndexOutOfBoundsException e) {
			System.out.println("\nIndex out of bounds. Please try again.");
		}
		catch (NumberFormatException e) {
			System.out.println("\nPlease enter a valid number.");
		}
		return minIndex;
	}

	public void vectorTest() {
		try {
			for(int[][] arr: vectors) {
				int nodeNum = 1;
				for(int i = 0; i < 2; i ++) {
					for(int j = 0; j < graph.size()-1; j++) {
						System.out.println("node " + nodeNum++);
						System.out.println("in degree " + arr[i][j]);
						System.out.println("out degree " + arr[i][j+1]);
					}
				}
			}
		} catch (IndexOutOfBoundsException e) {
			System.out.println("\nIndex out of bounds. Please try again.");
		}
	}

	public int[][] generateVector(int[][] query, KnowledgeGraph graph) {
		@SuppressWarnings("rawtypes")
		Iterator iter = graph.nodes();
		int column = 0; int row = 0;
		// first, get in degree in column 1
		// then out degree in column 2
		while(iter.hasNext()) {
			KnowledgeGraph.Node n = (Node) iter.next();
			query[column][row] = graph.degree(n);
			query[column+1][row] = graph.outDegree(n);
			row++;
		}
		return query;
	}

	public void cluster(int k, ArrayList<KnowledgeGraph> list) {
		try {
			int counter = 0;
			boolean done = false;
			while(counter<MAX_ITERATIONS || !done) {
				ArrayList<KnowledgeGraph> pickedCH = new ArrayList<KnowledgeGraph>();
				int[] clusterheads = new int[k];
				for(int i = 0; i < k; i++) {
					int check = 0;
					int y = rand.nextInt(list.size());
					for(int x: clusterheads) {
						if(x==y) {
							check++;
							if(check>1) {
								i--;
								break;
							}
						}
						else {
							clusterheads[i] = y;
						}
					}
				}
				System.out.println("Starting clusterheads.....");
				int c = 1;
				for(int x: clusterheads) {
					System.out.println("Clusterhead " + c++ + " = " + x);
				}
				for(int x: clusterheads) {
					Double min = Double.MAX_VALUE;
					double distance = 0;
					int minIndex = 0;
					for(int i = 0; i < list.size(); i++) {
						distance = computeGraphDistance(list.get(x), list.get(i));
						if(distance<min) {
							min = distance;
							minIndex = i;
						}
					}
					pickedCH.add(list.get(minIndex));
				}
				for(int i = 0; i < k; i++) {
					if(clusterheads[i] == median(pickedCH))
					{
						done = true;
					}
					clusterheads[i] = median(pickedCH);
				}
				int count = 1;
				System.out.println("Changed clusterheads.....");
				for(int x: clusterheads) {
					System.out.println("Clusterhead " + count++ + " = " + x);
				}
				counter++;
			}
		}catch (IndexOutOfBoundsException e) {
			System.out.println("\nIndex out of bounds. Please try again.");
		}
	}
}
