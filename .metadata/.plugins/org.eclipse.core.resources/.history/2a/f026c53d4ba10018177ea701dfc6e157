package main.Application.controllers;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Random;
import java.math.*;

import main.Application.models.KnowledgeGraph;
import main.Application.models.Lesson;
import main.Application.models.Student;
import main.Application.views.StudyBuddyView;
import main.Factories.KnowledgeGraphFactory;
import main.Application.models.KnowledgeGraph.Node;
/**
 * 
 * @author Robbie McArthur - 2098323m
 *
 * This class provides the control mechanisms for the Study Buddy
 * section of the program. 
 * 
 * It will enable users to add their own concept graph, and use it
 * to find relevant study buddies, using numerous distance measuring
 * algorithms such as simple feature extraction and graph clustering.
 *
 */

public class StudyBuddyController {
	private StudyBuddyView v;
	private String input;
	private Student user;
	private int choice, userID;
	private boolean found, finished;
	private ArrayList<KnowledgeGraph> studentGraphs;
	private ArrayList<KnowledgeGraph> recommendedGraphs;
	private ArrayList<Student> students;
	private ArrayList<int[][]> vectors;
	private int[][] query;
	private HashMap<String, Integer> userMap;
	private HashMap<Integer, KnowledgeGraph> graphMap;
	private HashMap<Integer, int[][]> vectorMap;
	private KnowledgeGraph graph, userGraph;
	private Random rand;

	private final int MAX_ITERATIONS = 20;

	public StudyBuddyController(KnowledgeGraph graph, ArrayList<KnowledgeGraph> graphs, int u) {
		v = new StudyBuddyView(this);
		this.graph = graph;
		this.studentGraphs = graphs;
		this.userID = u;
		user = new Student(graph);
		students = new ArrayList<Student>();
		recommendedGraphs = new ArrayList<KnowledgeGraph>();
		vectors = new ArrayList<int[][]>();
		found = false; 
		finished = false;
		input = "";
		choice = 0;
		rand = new Random();
	}


	public void start(GraphGeneratorController c) {
		while(!finished) {
			v.SBMenu();
			choice = Integer.parseInt(v.getUserInput());
			switch(choice) {
			case 1:
				System.out.println("\nEntering add profile function....");	
				addProfile();
				break;
			case 2:
				System.out.println("\nEntering upload graph function....");	
				System.out.println("Which graph are you uploading? ");
				choice = Integer.parseInt(v.getUserInput());
				uploadGraph(choice);
				break;
			case 3:
				System.out.println("\nEntering get profile function....");	
				getProfile();
				break;
			case 4:
				v.similarLearningAbility();
				System.out.println("How many neighbours do you wish to return?");
				choice = Integer.parseInt(v.getUserInput());
				cluster(choice,studentGraphs);
				break;
			case 5:
				v.coverKnowledgeGap();
				SFE(graph, studentGraphs);
				v.buddyMatch(graph);
				break;
			case 6:
				System.out.println("\nComparing graphs to check buddy compatibility....");	
				System.out.println("Please enter your graph ID: ");
				choice = Integer.parseInt(v.getUserInput());
				KnowledgeGraph q = studentGraphs.get(choice);
				System.out.println("Please enter your buddies graph ID:  ");
				choice = Integer.parseInt(v.getUserInput());
				KnowledgeGraph t = studentGraphs.get(choice);
				computeGraphDistance(q,t);
				break;
			case 7:
				System.out.println("\nReturning to main menu....");	
				c.returnToMainMenu();
			default:
				System.out.println("\nPlease enter a valid choice.");	
			}
		}
	}
	/**
	 * Method enables users to add their profiles, it will prompt for a username
	 * and therefore assign space in userMap for their credentials. 
	 * 
	 * Map will be used to link to their KnowledgeGraph in studentGraph list.
	 * If user already exists, program will prompt user to select alternative username.
	 */
	public void addProfile() {
		v.addUser();
		input = v.getUserInput();
		if(userMap.containsKey(input)) {
			System.out.println("Error. User already exists");
		}
		else {
			for(;;) {
				if(!(userMap.containsValue(userID)))
				{
					userMap.put(input, userID);
					System.out.println("User created: " + input + " ID: " + userMap.get(input));
				}
				else {
					userID++;
				}
			}
		}
	}

	/**
	 * At this stage user chooses from set of graphs within program. 
	 * 
	 * Future development to implement capability to input own graph.
	 * 
	 * @param choice
	 */
	public void uploadGraph(int choice) {
		userGraph = studentGraphs.get(choice);
		System.out.println("User graph successfully uploaded from graph set");
	}

	/**
	 * This version will enable users to input their own knowledgegraph, 
	 * although edges will still be randomized.
	 * 
	 * -- actually, allow users to input grades && dictate edges based on input.
	 */
	public void uploadGraph(KnowledgeGraphFactory g) {
		graph = g.getGraph();

	}

	public void getProfile() {
		v.getUser();
		input = v.getUserInput();
	}

	/**
	 * Method prints the details of the Knowledge Graph of recommended
	 * study buddy for user. 
	 *  
	 * @param graph - graph of recommended study buddy
	 */
	public void showBuddyDetails(KnowledgeGraph graph) {
		System.out.println("\n\nFound study buddy with the following knowledge graph: ");
		Iterator iter = graph.nodes();
		while(iter.hasNext()) {
			KnowledgeGraph.Node n = (Node) iter.next();
			Lesson les = (Lesson) n.getElement();
			System.out.println("ID: " + les.getID() + " Course: " + les.getCourse() 
			+ " Concept: " + les.getConcept() + " Teacher: " 
			+ les.getTeacher() + " Grade: " + les.getGrade() + " Student: " + les.getStudent());
		}
	}

	public void showBuddyDetails(Student s) {
		System.out.println("\n\nFound study buddy with the following knowledge graph: ");
		Iterator iter = graph.nodes();
		while(iter.hasNext()) {
			KnowledgeGraph.Node n = (Node) iter.next();
			Lesson les = (Lesson) n.getElement();
			System.out.println("ID: " + les.getID() + " Course: " + les.getCourse() 
			+ " Concept: " + les.getConcept() + " Teacher: " 
			+ les.getTeacher() + " Grade: " + les.getGrade() + " Student: " + les.getStudent());
		}
	}

	/**
	 * Method uses simple feature extraction, computing the distance between
	 * in/out degrees of the nodes in each graph within the graph set.
	 * 
	 * A recommendation of the k - nearest neighbouring graphs is returned.
	 * 
	 * @param graph - KnowledgeGraph used to find buddy
	 * @return graph - n x 2 matrix representation of graph
	 */
	public KnowledgeGraph SFE(KnowledgeGraph graph, ArrayList<KnowledgeGraph> graphs) {
		for(KnowledgeGraph g: graphs ) {
			int[][] query = new int[2][graph.size()];
			query = generateVector(query, g);
			vectors.add(query);
		}
		//		vectorTest();
		computeDistance();
		System.out.println("How many neighbours do you wish to return?");
		choice = Integer.parseInt(v.getUserInput());
		returnKNN(choice);
		return graph;
	}

	public void computeDistance() {
		System.out.println("Which graph number is yours?");
		choice = Integer.parseInt(v.getUserInput());
		query = vectors.get(choice);
		vectors.remove(query);
		double distance = 0.0;
		for(int[][] arr: vectors) {
			double overall = 0.0;
			for(int j = 0; j < graph.size(); j++) {
				distance = 0.0;
				for(int i = 0; i < 2; i ++) {
					distance += Math.pow(query[i][j]-arr[i][j], 2.0);
					//					System.out.println(String.format("Distance between query and matrix is: %.2f", distance));
				}
				distance = Math.sqrt(distance);
				overall += distance;
			}
			System.out.println("Overall distance is: " + overall);
			Student s = new Student(graph);
			s.setDistance(overall);
			students.add(s);
		}
	}

	/**
	 * Function takes two KnowledgeGraph objects and computes euclidian distance
	 * between them. 
	 * 
	 * @param query - query graph
	 * @param target - target graph
	 * @return distance - double, measure of distance between query and target
	 */
	public double computeGraphDistance(KnowledgeGraph query, KnowledgeGraph target) {
		double distance = 0.0;
		double overall = 0.0;
		int[][] q = new int[2][query.size()];
		int[][] t = new int[2][target.size()];
		q = generateVector(q, query);
		t = generateVector(t, target);
		for(int j = 0; j < graph.size(); j++) {
			distance = 0.0;
			for(int i = 0; i < 2; i ++) {
				distance += Math.pow(q[i][j]-t[i][j], 2.0);
				//				System.out.println(String.format("Distance between query and matrix is: %.2f", distance));
			}
			distance = Math.sqrt(distance);
			overall += distance;
		}
		System.out.println("Distance between graph 1 and graph 2 is: " + overall);
		return overall;
	}

	public int median(ArrayList<KnowledgeGraph> list) {
		Double minDistance = Double.MAX_VALUE;
		int minIndex = 0;
		for(int i = 0; i<list.size(); i++) {
			double d = 0.0;
			for(int j = 0; j<list.size(); j++) {
				d += computeGraphDistance(list.get(i), list.get(j));
			}
			if(d<minDistance) {
				minDistance = d;
				minIndex = i;
			}
		}
		return minIndex;
	}

	public void returnKNN(int k) {
		Collections.sort(students);
		//		System.out.println("Student sort test: ");
		int num = 1;
		//		for(Student s: students) {
		//			System.out.println("Student " + num + " distance: " + s.getDistance());
		//			num++;
		//		}
		System.out.println("Recommended students are: ");
		for(int i = 0; i < k; i++) {
			System.out.println("Student: " + students.get(i).getName() + " ID: " + students.get(i).getID() + " distance: " + students.get(i).getDistance());
		}
		showBuddyDetails(students.get(0));
	}

	public void vectorTest() {
		for(int[][] arr: vectors) {
			int nodeNum = 1;
			for(int i = 0; i < 2; i ++) {
				for(int j = 0; j < graph.size()-1; j++) {
					System.out.println("node " + nodeNum++);
					System.out.println("in degree " + arr[i][j]);
					System.out.println("out degree " + arr[i][j+1]);
				}
			}
		}
	}

	public int[][] generateVector(int[][] query, KnowledgeGraph graph) {
		Iterator iter = graph.nodes();
		int column = 0; int row = 0;
		// first, get in degree in column 1
		// then out degree in column 2
		while(iter.hasNext()) {
			KnowledgeGraph.Node n = (Node) iter.next();
			query[column][row] = graph.degree(n);
			query[column+1][row] = graph.outDegree(n);
			row++;
		}
		return query;
	}

	public void cluster(int k, ArrayList<KnowledgeGraph> list) {
		int counter = 0;
		boolean done = false;
		while(counter<MAX_ITERATIONS || !done) {
			ArrayList<KnowledgeGraph> pickedCH = new ArrayList<KnowledgeGraph>();
			int[] clusterheads = new int[k];
			for(int i = 0; i < k; i++) {
				int y = rand.nextInt(list.size());
				for(int x: clusterheads) {
					if(x==y) {
						if(!(i==0)){i--;}
						break;
					}
					else {
						clusterheads[i] = y;
					}
				}
			}
			System.out.println("Starting clusterheads.....");
			int c = 1;
			for(int x: clusterheads) {
				System.out.println("Clusterhead " + c + " = " + x);
			}
			for(int i = 0; i < list.size(); i++) {
				Double min = Double.MAX_VALUE;
				double current = 0;
				for(int x: clusterheads) {
					current = computeGraphDistance(list.get(x), list.get(i));
					if(current<min) {
						min = current;
					}
				}
				pickedCH.add(list.get(clusterheads[i]));
			}
			for(int i = 0; i < k; i++) {
				if(clusterheads[i] == median(pickedCH))
				{
					done = true;
				}
				clusterheads[i] = median(pickedCH);
			}
			int count = 1;
			System.out.println("Changed clusterheads.....");
			for(int x: clusterheads) {
				System.out.println("Clusterhead " + count + " = " + x);
			}
			counter++;
		}
	}
}
