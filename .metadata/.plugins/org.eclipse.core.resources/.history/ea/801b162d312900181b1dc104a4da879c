

import java.util.Iterator;

public class BSTBag<E extends Comparable<E>> implements Bag {
	/**
	 * Inner class
	 */
	private Node<CountedElement<E>> root;
	private static class Node <E extends Comparable<E>>
	{
		protected E element;
		protected Node<E> left, right;

		protected Node(E elem) 
		{
			element = elem;
			left = null; right = null;
		}


		public BSTBag() 
		{
			root = null;
		}

		@Override
		public boolean isEmpty() {
			if(root==null)
			{
				return true;
			}
			else
			{
				return false;
			}
		}

		@Override
		public int size() {
			if(root==null)
			{
				return 0;
			}
			else
			{
				return ;
			}
		}

		@Override
		public boolean contains(Object element) {
			if(this.contains(element))
			{
				return true;
			}
			else
			{
				return false;
			}
		}

		@Override
		public boolean equals(Bag that) {
			if(this==that)
			{
				return true;
			}
			else
			{
				return false;
			}
		}

		@Override
		public void clear() {
			{

			}
		}

		@Override
		public void add(Object element) {

		}

		@Override
		public void remove(Object element) {
			// TODO Auto-generated method stub

		}

		@Override
		public Iterator iterator() {
			// TODO Auto-generated method stub
			return null;
		}

		private static class Node <E extends Comparable<E>>
		{
			protected E element;
			protected Node<E> left, right;

			protected Node(E elem) 
			{
				element = elem;
				left = null; right = null;
			}
		}

	}
}
